#lang eopl

;; language for IMPLICIT-REFS

(provide (all-defined-out))

;;;;;;;;;;;;;;;; grammatical specification ;;;;;;;;;;;;;;;;

(define the-lexical-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifier
     (letter (arbno (or letter digit "_" "-" "?")))
     symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)
    ))

(define the-grammar
  '((program (expression) a-program)
    
    (expression (number) const-exp)
    (expression
     ("-" "(" expression "," expression ")")
     diff-exp)
    
    (expression
     ("zero?" "(" expression ")")
     zero?-exp)
    
    (expression
     ("if" expression "then" expression "else" expression)
     if-exp)
    
    (expression (identifier) var-exp)

    ;; Problem 3 ;;;
    ;; Change the implementation of let grammar to new one
    ;; given in pdf.
    ;; Hint: Use separated-list
    (expression
     ("let" identifier "=" expression "in" expression)
     let-exp)


    ;;;; Problem 2 ;;;;
    ;; Change the implementation of proc grammar to new one
    ;; given in pdf.
    ;; Hint: Use separated-list
    (expression
     ("proc" "(" (seperated-list identifier ",")  ")" expression)
     proc-exp)

    ;; Change the implementation of call grammar
    ;; to new one given in pdf.
    (expression
     ("(" expression expression ")")
     call-exp)
    
    (expression
     ("letrec"
      (arbno identifier "(" identifier ")" "=" expression)
      "in" expression)
     letrec-exp)
    
    (expression
     ("begin" expression (arbno ";" expression) "end")
     begin-exp)
    
    ;; new for implicit-refs
    
    (expression
     ("set" identifier "=" expression)
     assign-exp)

    ))

;;;;;;;;;;;;;;;; sllgen boilerplate ;;;;;;;;;;;;;;;;

(sllgen:make-define-datatypes the-lexical-spec the-grammar)

(define show-the-datatypes
  (lambda () (sllgen:list-define-datatypes the-lexical-spec the-grammar)))

(define scan&parse
  (sllgen:make-string-parser the-lexical-spec the-grammar))

(define just-scan
  (sllgen:make-string-scanner the-lexical-spec the-grammar))

